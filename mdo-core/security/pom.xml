<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>mdo-core</artifactId>
		<groupId>fr.mch.mdo</groupId>
		<version>1.0-SNAPSHOT</version>
	</parent>

	<artifactId>security</artifactId>
	<name>security</name>
	<url>http://maven.apache.org</url>
	<description>This module is only used to generate java security files like certificate file</description>

	<build>
		<filters>
			<filter>src/main/filters/filter-${target-company}.properties</filter>
		</filters>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<!-- Use mvn org.apache.maven.plugins:maven-eclipse-plugin:2.6:eclipse 
					instead of default version 2.7 because of bug MECLIPSE-551 regression - Resources 
					are excluded if resource dir equals source dir -->
				<excludes>
					<exclude>security-tools/**</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>security-tools/**</include>
				</includes>
			</resource>
		</resources>

		<finalName>pkcs12ToJks</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>initialize-security-resources</id>
						<phase>initialize</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<echo>
									Remove all files in ${security-source-generated-files-folder}
									but not dummy file
								</echo>
								<delete verbose="true">
									<fileset dir="${security-source-generated-files-folder}">
										<exclude name="dummy" />
									</fileset>
								</delete>
								<!-- <echo> Remove all files in ${security-generated-files-folder} 
									</echo> <delete verbose="true" failonerror="no"> <fileset dir="${security-generated-files-folder}"/> 
									</delete> -->
							</target>
						</configuration>
					</execution>
					<execution>
						<id>generate-new-rsa-key</id>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<echo>
									${openssl.exe} genrsa -out ${privateKeyRSA} 2048
								</echo>
								<exec executable="${openssl.exe}">
									<arg line="genrsa -out '${privateKeyRSA}' 1024" />
								</exec>
							</target>
						</configuration>
					</execution>
					<execution>
						<id>create-self-signed-test-certificate</id>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<description>
									Creating a self-signed test certificate.
									This file
									can be used with the file mdo-private-key.pem for Tomcat APR in
									production environments
									(The Apache Tomcat Native library which
									allows optimal performance in production environments was not
									found on the java.library.path)
								</description>
								<echo>
									${openssl.exe} req -config ${openSSLConf} -new -x509 -key ${privateKeyRSA}
									-out ${selfSignedCertificate} -days 1095
								</echo>
								<exec executable="${openssl.exe}">
									<arg
										line="req -config '${openSSLConf}' -new -x509 -key '${privateKeyRSA}' -out '${selfSignedCertificate}' -days 1095" />
								</exec>
							</target>
						</configuration>
					</execution>
					<execution>
						<id>create-pkcs12-keystore</id>
						<phase>process-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<description>
									Create pkcs12 keystore
								</description>
								<delete file="${keystorePKCS12}"></delete>
								<echo>
									${openssl.exe} pkcs12 -export
									-passout file:${passwordsFileKeystorePKCS12}
									-passin file:${passwordsFileKeystorePKCS12}
									-in ${selfSignedCertificate}
									-inkey ${privateKeyRSA}
									-out ${keystorePKCS12}
									-name ${alias}
								</echo>
								<exec executable="${openssl.exe}">
									<arg
										line="pkcs12 -export -passout file:'${passwordsFileKeystorePKCS12}' -passin file:'${passwordsFileKeystorePKCS12}' -in '${selfSignedCertificate}' -inkey '${privateKeyRSA}' -out '${keystorePKCS12}' -name ${alias}" />
								</exec>
							</target>
						</configuration>
					</execution>
					<execution>
						<id>convert-pkcs12-keystore-to-jks-keystore</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<description>
									Convert PKCS12 keystore to JKS keystore.
									The generated file
									kimsankeystore is used for SSL in
									Tomcat
									server.xml file for none production environment
									(The Apache
									Tomcat Native library which allows optimal performance in
									production environments was not found on the java.library.path)
								</description>
								<delete file="${keystoreJKS}" verbose="true"><!-- Assuming that this 
										file does not already exist -->
								</delete>
								<echo>
									<!-- Instead of use a folder ${project.build.outputDirectory} in 
										the classpath. You can use the jar target/${project.build.finalName}.jar, 
										but this jar is only generated after the phase package -->
									java -classpath ${project.build.outputDirectory}
									fr.mch.mdo.security.util.PKCS12Import
									${keystorePKCS12}
									${keystoreJKS}
									${passwordsFileKeystorePKCS12}
								</echo>
								<java classpath="${project.build.outputDirectory}"
									classname="fr.mch.mdo.security.util.PKCS12Import">
									<arg value="${keystorePKCS12}" />
									<arg value="${keystoreJKS}" />
									<arg value="${passwordsFileKeystorePKCS12}" />
								</java>
								<echo>
									Remove dummy file in ${security-generated-files-folder}
								</echo>
								<delete verbose="true"
									file="${security-generated-files-folder}/dummy" />
							</target>
						</configuration>
					</execution>
					<execution>
						<id>finalize-mdo-security-resources</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<echo>
									Copy files from ${security-generated-files-folder}
								</echo>
								<copy todir="${security-source-generated-files-folder}">
									<fileset dir="${security-generated-files-folder}" />
								</copy>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<properties>
		<target-company>mdo</target-company>
		<alias>${target-company}alias</alias>

		<security-source-generated-files-folder>
			${basedir}/src/main/resources/generated
		</security-source-generated-files-folder>
		<resources-folder>
			${project.build.outputDirectory}<!-- ${basedir}/target/classes -->
		</resources-folder>
		<security-tools-folder>
			${resources-folder}/security-tools
		</security-tools-folder>
		<security-files-folder>
			${resources-folder}
		</security-files-folder>
		<security-generated-files-folder>
			${security-files-folder}/generated
		</security-generated-files-folder>
		<openssl.exe>${platform.dependency.openssl.exe}</openssl.exe>
		<openSSLConf.initial.sample>${security-tools-folder}/openssl-initial-sample.cnf</openSSLConf.initial.sample>
		<openSSLConf>
			${security-files-folder}/openssl-noprompt.cnf
		</openSSLConf>
		<passwordsFileKeystorePKCS12>
			${security-files-folder}/keystore-pkcs12.pass
		</passwordsFileKeystorePKCS12>
		<privateKeyRSA>
			${security-generated-files-folder}/${target-company}-private-key.pem
		</privateKeyRSA>
		<certificateRequest>
			${security-generated-files-folder}/cert.csr
		</certificateRequest>
		<selfSignedCertificate>
			${security-generated-files-folder}/${target-company}-cacert.pem
		</selfSignedCertificate>
		<keystoreJKS>
			${security-generated-files-folder}/${target-company}-keystore.jks
		</keystoreJKS>
		<keystorePKCS12>
			${security-generated-files-folder}/${target-company}-keystore.pkcs12
		</keystorePKCS12>
	</properties>

	<dependencies>
        <!-- ===================== compile ===================== -->
        <!-- ===================== provided ===================== -->
        <!-- ===================== runtime ===================== -->
        <!-- ===================== test ===================== -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>test</artifactId>
			<version>1.0-SNAPSHOT</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
	</dependencies>

	<!-- profiles (with activation per platform) -->
	<profiles>
		<profile>
			<id>mdo-windows</id>
			<properties>
				<platform.dependency.openssl.exe>${security-tools-folder}/openssl.exe</platform.dependency.openssl.exe>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
				<os>
					<family>windows</family>
				</os>
			</activation>
		</profile>
		<profile>
			<id>mdo-linux</id>
			<properties>
				<platform.dependency.openssl.exe>/usr/bin/openssl</platform.dependency.openssl.exe>
			</properties>
			<activation>
				<activeByDefault>false</activeByDefault>
				<os>
					<name>linux</name>
				</os>
			</activation>
		</profile>
	</profiles>

</project>